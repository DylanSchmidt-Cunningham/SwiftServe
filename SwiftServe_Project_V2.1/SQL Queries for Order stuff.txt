SQL Queries for Order stuff

What are our order statuses?
New
In Progress
Complete

right now, only New status matters because that will be the status when we insert new orders
these will matter more when we start tracking order status

oh, an aside about prices
there's duplicate columns in both menu_items and order_items for price
this will produce inconsistencies if the menu_items table is updated
this is deliberate
we want this
if a restaurant changes its prices, it doesn't retroactively change past bills, yeah?
same goes for the taxes and serviceCharge columns
those rates can change, it's not retroacive

---

about queries
all these queries are structured to be pasted into the sqlStatement declaration for a gridView
e.g.
string sqlStatement = "SELECT (OrderID, Creation_Time, Total, Status) FROM Orders WHERE CentennialEmail = " + Session["username"];

the rest of most gridviews can be exactly the same as the one I wrote earlier (OrdersPage.cs), unless you need to add update/create buttons, etc.
for those read here: 
http://geekswithblogs.net/dotNETvinz/archive/2009/02/22/gridview-insert-edit-update-and-delete--the-ado.net-way.aspx
http://geekswithblogs.net/dotNETvinz/archive/2009/06/10/adding-rows-in-gridview-with-edit-update-and-delete-functionality.aspx
oh, and you won't need the selection buttons if you don't need a DetailsView, obviously

if something goes horribly wrong with the details view, I was reading this for reference:
https://www.aspsnippets.com/Articles/ASPNet-GridView-DetailsView-Master-Detail-Example-Display-selected-GridView-Row-in-DetailsView-in-ASPNet.aspx

---

Getting all old orders for a user:
"SELECT Orders.OrderID, RestaurantName, MIN(CreationTime) AS CreationTime, "
+ "MIN(Semitotal) AS Subtotal, Min(Taxes) AS Tax, MIN(ServiceCharge) AS ServiceFee, MIN(Semitotal + Taxes + ServiceCharge) AS Total, MIN(Orders.Status) AS Status "
+ "FROM Orders, Order_Items, Menu_Items WHERE Orders.CentennialEmail = '" + Session["username"]
+ "' AND Orders.OrderID = Order_Items.OrderID AND Order_Items.Menu_Item_Name = Menu_Items.Name GROUP BY Orders.OrderID, Menu_Items.RestaurantName"
the GROUP BY is crucial because there's several order_items per order, but they all reference the same restaurant's menu and we only need one copy of the restaurant's name

Then use a GridView to show the menu items ordered on selected orders:
"SELECT Menu_Item_Name, Quantity, Price, Subtotal FROM Order_Items WHERE OrderID = " + orderID + ")"

---

Creating a new order:

selected food items will be passed to the page in Request... somehow.
Probably just the item names, restaurant name, and quantities
re-request to get the prices without tampering with the request variables
then run up the total
how to organize it so that the list of request parameters is iterable and can run through a loop, that's the tricky part
can you send a DataTable or something?  I don't know

this query is woefully out-of-date because I've made many changes to the databse since writing it

DateTime now = DateTime.NOW; // C#
"INSERT INTO Orders (CentennialEmail, CreationTime, DelayTime, Status) VALUES ('" + Session["username"] +"', '" + now + "', 0, 'Created')"

"SELECT OrderID FROM Orders WHERE CentennialEmail = '" + Session["username"] + "' AND CreationTime = '" + now + "'"
parse that query result for value to assign C# variable orderId

"INSERT INTO Order_Items (Menu_Item, Name, OrderID, Price, Qty) VALUES ('" + Menu_Item_Name + "', " + orderId + ", " + Price + ", " + Quantity + ")"

---

Displaying menu items to choose from
"SELECT RestaurantName, Name, Price FROM Menu_Items WHERE Visible = 1 and InStock = 1 AND RestaurantName = '" + restaurant + "'"
this then needs columns for entering quantity (not read-only, unlike the others) and pull all quantities > 0 for generating the order
don't actually generate the order yet, just pass the info over to the confirm page
let the confirm page calculate the total cost and make a dummy order (note that OrderID is auto-increment, so no need to provide a value for it)
if the user agrees, then use the create new order (and order_items) queries.

---

updates only really affect status, the rest isn't related to orders
UPDATE Orders SET Status = '" + newStatus + "' WHERE OrderID = " + myOrderID
this is again outside our current deliverables for this iteration